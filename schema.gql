# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AD {
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  id: ID!
  image: String
  link: String
  updated_at: DateTimeISO
}

type Adjudicated {
  adjudicated_status: Adjudicated_Status
  comments: String
  created_at: DateTimeISO
  date_surgery: DateTimeISO
  deleted_at: DateTimeISO
  doctor: Doctor
  end_date_payment: DateTimeISO
  id: ID!
  locality: Locality
  quota_price: Float
  quotas_number: Float
  quotas_paid: Float
  start_date_payment: DateTimeISO
  status: Status
  surgery: Surgery
  totalPaid: Float
  totalPaidSum: Float
  total_price: Float
  updated_at: DateTimeISO
  user: User
}

"""List of available adjudicated status"""
enum Adjudicated_Status {
  Active
  Blocked
  Rejected
  Validating
  Verified
}

type CodeReference {
  code: String!
  count: Float
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  id: ID!
  name: String!
  updated_at: DateTimeISO
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Doctor {
  adjudicateds: [Adjudicated!]!
  country: String
  created_at: DateTimeISO
  curriculum: File_DB
  deleted_at: DateTimeISO
  description: String
  evidences: [Evidence!]
  id: ID
  profession: String
  provincia: String
  status: Status!
  surgeries: [SurgeryDoctor!]
  updated_at: DateTimeISO
  user: User
}

type DoctorBasicData {
  curriculum: File_DB
  doctor: Doctor
  status: Boolean!
}

type Evidence {
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  doctor: Doctor!
  id: ID!
  image: String
  link: String
  type: EvidenceType!
  updated_at: DateTimeISO
}

"""Enum para definir el tipo de evidencia (YouTube o Media)"""
enum EvidenceType {
  MEDIA
  YOUTUBE
}

type File_DB {
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  file_key: String
  file_link: String
  file_name: String
  file_type: File_Type!
  id: ID!
  surgery: Surgery
  updated_at: DateTimeISO
  user: User
}

"""List of available file types"""
enum File_Type {
  CURRICULUM_VITAE
  DOCTOR_PHOTOS
  DOCTOR_VIDEOS
  PAYMENT_RECEIPT
  SURGERY_PHOTOS
  SURGERY_VIDEOS
}

"""List of available genres"""
enum Gender {
  Female
  Male
  Other
  PreferNotToSay
}

type Locality {
  adjudicated: [Adjudicated!]!
  created_at: DateTimeISO!
  deleted_at: DateTimeISO
  id: ID!
  iso_code: String!
  name: String!
  updated_at: DateTimeISO!
}

type Mutation {
  addDoctorToSurgery(doctorId: String!, surgeryId: String!): Boolean!
  createAdMutation(image: String!, link: String!): Boolean!
  createCodeReference(name: String!): Boolean!
  createEvidence(image: String!, link: String!, type: EvidenceType!): Boolean!
  createNewApplicantDoctor(email: String!, name: String!, phone: String!, registration_number: String!, specialty: String!): Boolean!
  createNewDoctor(country: String, province: String): Doctor!
  createNewSurgerie(surgery: SurgeryInput!): Boolean!
  createPaymentRequest(data: PaymentInput!): String!
  createTransaction(adjudicatedId: String!): Transaction
  deleteAdMutation(id: String!): Boolean!
  deleteEvidence(id: String!): Boolean!
  deleteSurgeries(surgeriesId: [String!]!): Boolean!
  generatePresignedUrlCurriculumDoctor(file_type: String!): PresignedUrlResponse!
  generatePresignedUrlPaymentReceipt(file_type: String!): PresignedUrlResponse!
  generatePresignedUrlSurgeryImage(file_type: String!): PresignedUrlResponse!
  generatePresignedUrlUserImage(file_type: String!): PresignedUrlResponse!
  getCvFile(user_id: String!): UpdateProfileCvResponse!
  handleGoogleSignInUp(token: String!): Boolean!
  login(password: String!, phone_email: String!): UserDataResponseSingInUp!
  loginWithGoogleToken(token: String!): UserDataResponseSingInUp!
  paymentUpdateAdjudicated(adjudicatedId: String!, quotas_number: Float!): Boolean!
  registerUser(birth_date: String!, first_name: String!, gender: String!, last_name: String!, password: String!, phone_email: String!): UserDataResponseSingInUp!
  saveCurriculumVitaeDataBase(curriculumKey: String!, curriculumLocation: String!, file_type: String!): Boolean!
  saveImageUserS3(profileImageKey: String!, profileImageLocation: String!): Boolean!
  savePaymentReceiptDataBase(paymentKey: String!, paymentLocation: String!): Boolean!
  subscribeSurgerie(coments: String, doctorId: String, document_identification: String!, email: String!, first_name: String!, last_name: String!, phone: String!, quotaPrice: Float!, quotasNumber: Int!, surgerieId: String!, totalPrice: Float!): Adjudicated!
  updateAccountSettings(birth_date: String!, email: String!, first_name: String!, last_name: String!, phone: String!): Boolean!
  updateAdMutation(id: String!, image: String!, link: String!): Boolean!
  updateEvidence(id: String!, image: String!, link: String!, type: EvidenceType!): Boolean!
  updateInfoDoctor(description: String, doctorId: String!, status: String!): Doctor!
  updateProfileSettings(gender: String!, identification_document: String!, social_media: [SocialMediaInput!]!): Boolean!
  updateSurgerie(status: String!, surgeryId: String!): Boolean!
  updateTransactionStatus(id: String!, status: String!): Boolean!
  updateUserProfileImage(profile_image: String!): UpdateProfileImageResponse!
  useCodeReference(code: String!): Boolean!
  verifyAdjudicated(adjudicatedId: String!): Boolean!
}

input PaymentInput {
  adjudicadosId: String
  back_url_pending: String
  back_url_rejected: String
  back_url_success: String
  description: String!
  external_reference: String
  first_due_date: String!
  first_total: Float!
  payer_email: String
  payer_name: String
  second_due_date: String
  second_total: Float
}

type PresignedUrlResponse {
  key: String!
  status: Boolean!
  url: String!
}

type Query {
  evidences: [Evidence!]!
  evidencesByDoctor(doctorId: String!): [Evidence!]!
  getAdjudicatedByDoctor: [Adjudicated!]!
  getAdjudicatedById(adjudicatedId: String!): Adjudicated
  getAdjudicatedByMonthAndYear(limit: Float = 7, month: Float!, offset: Float = 0, year: Float!): [Adjudicated!]!
  getAdjudicatedByStatus(status: String!): [Adjudicated!]!
  getAdjudicatedListDoctor: [Adjudicated!]!
  getAdsQuery: [AD!]!
  getAllAdjudicated: [Adjudicated!]!
  getAllSurgeriesWithValues(limit: Float = 8, offset: Float = 0): [Surgery!]!
  getCodeReferences: [CodeReference!]!
  getDoctor(doctorId: String!): DoctorBasicData!
  getDoctorByStatus(limit: Int, offset: Int, status: String!): [Doctor!]!
  getDoctorFilter(limit: Int, offset: Int): [Doctor!]!
  getDoctorsByName(limit: Int, name: String!, offset: Int): [Doctor!]!
  getEarningsByDoctor(doctorId: String!): [Adjudicated!]!
  getMyAdjudicated: [Adjudicated!]!
  getMySurgeries: [Surgery!]!
  getSurgerieById(id: String!): Surgery!
  getSurgeriesDoctorById(doctorId: String!): [Surgery!]!
  getSurgeryCategory(category: String!): [Surgery!]!
  getSurgeryStatus(status: String!): [Surgery!]!
  getTransactionByStatus(status: String!): [Transaction!]!
  getUserData: UserDataResponseSingInUp!
  getUserLottery: [Adjudicated!]!
  ping: String!
}

"""List of available roles"""
enum Role {
  Admin
  Doctor
  Guest
  User
}

"""List of available social media"""
enum SocialMedia {
  Facebook
  Instagram
  LinkedIn
  Pinterest
  Snapchat
  Telegram
  TikTok
  Twitter
  WhatsApp
  YouTube
}

input SocialMediaInput {
  link: String!
  type: String!
}

type Social_Media {
  created_at: DateTimeISO!
  deleted_at: DateTimeISO
  id: ID!
  link: String!
  status: Status!
  type: SocialMedia!
  updated_at: DateTimeISO!
  user: [User!]
}

"""List of available status"""
enum Status {
  Active
  Blocked
  Deleted
  Inactive
}

"""Enum de subcategorías de cirugía"""
enum SubSurgeryCategories {
  BreastAugmentation
  BreastLift
  BreastReduction
  ButtockLift
  EyelidSurgery
  Facelift
  Liposuction
  TummyTuck
}

type Surgery {
  adjudicateds: [Adjudicated!]
  amount: Float!
  category: SurgeryCategories!
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  description: String
  doctors: [SurgeryDoctor!]
  file_banner: File_DB
  files: [File_DB!]
  id: ID!
  name: String!
  rating: Float!
  status: Status!
  subcategory: SubSurgeryCategories
  type: SurgeryTypes!
  updated_at: DateTimeISO
}

"""Categories of surgeries"""
enum SurgeryCategories {
  BodySurgeries
  BreastSurgeries
  CosmeticSurgeries
  DentalSurgeries
  ENTSurgeries
  FacialSurgeries
  GeneralSurgeries
  GynecologicSurgeries
  NeurologicalSurgeries
  OphthalmicSurgeries
  OrthopedicSurgeries
  PediatricSurgeries
  ReconstructiveSurgeries
  ThoracicSurgeries
  TransplantSurgeries
  UrologicSurgeries
}

type SurgeryDoctor {
  doctor: Doctor!
  id: ID!
  surgery: Surgery!
}

input SurgeryInput {
  amount: Float
  category: SurgeryCategories
  description: String
  id: String
  name: String
  status: Status
  subcategory: SubSurgeryCategories
  surgeryImage: String
  surgeryImageKey: String
  surgeryImageLocation: String
  type: SurgeryTypes
}

"""Types of surgeries"""
enum SurgeryTypes {
  Blepharoplasty
  BreastAugmentation
  BreastLift
  BreastReduction
  BuccalFatRemoval
  ButtockAugmentation
  Facelift
  Liposuction
  LiposuctionWithButtockAugmentation
  LiposuctionWithTummyTuck
  Otoplasty
  Rhinoplasty
  SkinLesionTreatment
  TummyTuck
}

type Transaction {
  AdjudicadosId: String
  created_at: DateTimeISO!
  externalId: String!
  id: ID!
  status: TransactionStatus!
  updated_at: DateTimeISO!
  user: User!
}

enum TransactionStatus {
  PENDING
  REJECTED
  SUCCESS
}

type UpdateProfileCvResponse {
  cv: String
  status: Boolean!
}

type UpdateProfileImageResponse {
  profile_picture: String
  status: Boolean!
}

type User {
  adjudicated: [Adjudicated!]
  birth_date: DateTimeISO
  created_at: DateTimeISO!
  deleted_at: DateTimeISO
  doctor: Doctor
  email: String
  files: [File_DB!]
  first_name: String!
  gender: Gender!
  id: ID!
  identification_document: String
  last_access: DateTimeISO
  last_name: String!
  password: String!
  phone_number: String
  profile_picture: String
  profile_picture_key: String
  role: Role!
  social_media: [Social_Media!]
  status: Status!
  transactions: [Transaction!]
  updated_at: DateTimeISO!
}

type UserDataResponseSingInUp {
  token: String!
  user: User!
}